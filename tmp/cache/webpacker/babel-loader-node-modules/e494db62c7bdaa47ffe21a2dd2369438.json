{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\nimport { ApolloClient } from 'apollo-client'; // cache\n\nimport { introspectSchema, makeRemoteExecutableSchema } from 'graphql-tools';\nimport { InMemoryCache } from 'apollo-cache-inmemory'; // links\n\nimport { HttpLink } from 'apollo-link-http';\nimport { onError } from 'apollo-link-error';\nimport { ApolloLink, Observable } from 'apollo-link';\nexport var createCache = function createCache() {\n  var cache = new InMemoryCache(); // if (process.env.NODE_ENV === 'development') {\n  //   window.secretVariableToStoreCache = cache;\n  // }\n\n  return cache;\n}; // getToken from meta tags\n\nvar getToken = function getToken() {\n  return document.querySelector('meta[name=\"csrf-token\"]').getAttribute('content');\n};\n\nvar token = getToken();\n\nvar setTokenForOperation = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(operation) {\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            return _context.abrupt(\"return\", operation.setContext({\n              headers: {\n                'X-CSRF-Token': token\n              }\n            }));\n\n          case 1:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function setTokenForOperation(_x) {\n    return _ref.apply(this, arguments);\n  };\n}(); // link with token\n\n\nvar createLinkWithToken = function createLinkWithToken() {\n  return new ApolloLink(function (operation, forward) {\n    return new Observable(function (observer) {\n      var handle;\n      Promise.resolve(operation).then(setTokenForOperation).then(function () {\n        handle = forward(operation).subscribe({\n          next: observer.next.bind(observer),\n          error: observer.error.bind(observer),\n          complete: observer.complete.bind(observer)\n        });\n      })[\"catch\"](observer.error.bind(observer));\n      return function () {\n        if (handle) handle.unsubscribe();\n      };\n    });\n  });\n};\n\nvar logError = function logError(error) {\n  return console.error(error);\n}; // create error link\n\n\nvar createErrorLink = function createErrorLink() {\n  return onError(function (_ref2) {\n    var graphQLErrors = _ref2.graphQLErrors,\n        networkError = _ref2.networkError,\n        operation = _ref2.operation;\n\n    if (graphQLErrors) {\n      logError(\"GraphQL - Error, \".concat({\n        errors: graphQLErrors,\n        operationName: operation.operationName,\n        variables: operation.variables\n      }));\n    }\n\n    if (networkError) {\n      logError(\"'GraphQL - NetworkError' \".concat(networkError));\n    }\n  });\n}; // app/javascript/utils/apollo.js\n//...\n// http link\n\n\nvar httpLink = new HttpLink({\n  uri: '/graphql',\n  credentials: 'include'\n}); // export const schema = async () => {\n//   const schema = await introspectSchema(httpLink);\n//   const executableSchema = makeRemoteExecutableSchema({\n//     schema,\n//     link: httpLink,\n//   });\n//   return executableSchema\n// }\n\nexport var createClient = function createClient(cache) {\n  return new ApolloClient({\n    link: ApolloLink.from([createErrorLink(), createLinkWithToken(), httpLink]),\n    cache: cache\n  });\n};\nvar client = createClient(createCache());\nexport default client;","map":{"version":3,"sources":["/home/luis/strava_clone/app/javascript/packs/utils/client.js"],"names":["ApolloClient","introspectSchema","makeRemoteExecutableSchema","InMemoryCache","HttpLink","onError","ApolloLink","Observable","createCache","cache","getToken","document","querySelector","getAttribute","token","setTokenForOperation","operation","setContext","headers","createLinkWithToken","forward","observer","handle","Promise","resolve","then","subscribe","next","bind","error","complete","unsubscribe","logError","console","createErrorLink","graphQLErrors","networkError","errors","operationName","variables","httpLink","uri","credentials","createClient","link","from","client"],"mappings":"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","sourcesContent":["import { ApolloClient } from 'apollo-client';\n// cache\nimport { introspectSchema, makeRemoteExecutableSchema } from 'graphql-tools';\nimport { InMemoryCache } from 'apollo-cache-inmemory';\n// links\nimport { HttpLink } from 'apollo-link-http';\nimport { onError } from 'apollo-link-error';\nimport { ApolloLink, Observable,  } from 'apollo-link';\nexport const createCache = () => {\n  const cache = new InMemoryCache();\n  // if (process.env.NODE_ENV === 'development') {\n  //   window.secretVariableToStoreCache = cache;\n  // }\n  return cache;\n};\n\n// getToken from meta tags\nconst getToken = () =>\n  document.querySelector('meta[name=\"csrf-token\"]').getAttribute('content');\nconst token = getToken();\nconst setTokenForOperation = async operation =>\n  operation.setContext({\n    headers: {\n      'X-CSRF-Token': token,\n    },\n  });\n// link with token\nconst createLinkWithToken = () =>\n  new ApolloLink(\n    (operation, forward) =>\n      new Observable(observer => {\n        let handle;\n        Promise.resolve(operation)\n          .then(setTokenForOperation)\n          .then(() => {\n            handle = forward(operation).subscribe({\n              next: observer.next.bind(observer),\n              error: observer.error.bind(observer),\n              complete: observer.complete.bind(observer),\n            });\n          })\n          .catch(observer.error.bind(observer));\n        return () => {\n          if (handle) handle.unsubscribe();\n        };\n      })\n  );\n\nconst logError = (error) => console.error(error);\n// create error link\nconst createErrorLink = () => onError(({ graphQLErrors, networkError, operation }) => {\n  if (graphQLErrors) {\n    logError(`GraphQL - Error, ${{\n      errors: graphQLErrors,\n      operationName: operation.operationName,\n      variables: operation.variables,\n    }}`);\n  }\n  if (networkError) {\n    logError(`'GraphQL - NetworkError' ${networkError}`);\n  }\n})\n\n// app/javascript/utils/apollo.js\n//...\n// http link\nconst httpLink = new HttpLink({\n    uri: '/graphql',\n    credentials: 'include',\n  })\n\n  // export const schema = async () => {\n  //   const schema = await introspectSchema(httpLink);\n  \n  //   const executableSchema = makeRemoteExecutableSchema({\n  //     schema,\n  //     link: httpLink,\n  //   });\n  \n  //   return executableSchema\n  // }\n  export const createClient = (cache) => {\n    return new ApolloClient({\n      link: ApolloLink.from([\n        createErrorLink(),\n        createLinkWithToken(),\n        httpLink,\n      ]),\n      cache,\n    });\n  };\n  const client =  createClient(createCache());\n \n  export default client;"]},"metadata":{},"sourceType":"module"}